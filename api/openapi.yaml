openapi: 3.0.3
info:
  title: NetFlix Clone
  description: A Netflix Clone
  contact:
    name: Francisco Dias 29185
    email: a029185@umaia.pt
  version: 0.0.1
servers:
- url: http://localhost:8080/
  description: My localhost
  variables:
    basePath:
      default: /
paths:
  /user:
    get:
      tags:
      - UserController
      summary: Retrieve users
      operationId: retrieveUsers
      responses:
        "200":
          description: Array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
                x-content-type: application/json
      x-swagger-router-controller: UserController
    post:
      tags:
      - UserController
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
                x-content-type: application/json
        "405":
          description: Invalid input
      x-swagger-router-controller: UserController
  /user/{id}:
    get:
      tags:
      - UserController
      summary: Retrieve user
      operationId: retrieveUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: Array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
                x-content-type: application/json
        "400":
          description: Bad Request
        "404":
          description: Not Found
      x-swagger-router-controller: UserController
    put:
      tags:
      - UserController
      summary: Update a user's information
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: Successfull Update
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
                x-content-type: application/json
        "400":
          description: Bad request
        "404":
          description: User not found
      x-swagger-router-controller: UserController
    delete:
      tags:
      - UserController
      summary: Deletes a user by ID
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "204":
          description: User was successfully deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
                x-content-type: application/json
        "400":
          description: Invalid user ID provided
        "404":
          description: User not found
      x-swagger-router-controller: UserController
  /watched/{id}:
    get:
      tags:
      - Watched
      summary: Retrieves a user's watched Movie list
      operationId: retrieveWatchedList
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: Array of Watched Movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/watched'
                x-content-type: application/json
        "400":
          description: Invalid user ID provided
        "404":
          description: User not found
      x-swagger-router-controller: Watched
    post:
      tags:
      - Watched
      summary: Create a Watched List for the user
      operationId: createWatchedList
      parameters:
      - name: id
        in: path
        description: ID of the movie to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watched'
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/watched'
                x-content-type: application/json
        "405":
          description: Invalid input
      x-swagger-router-controller: UserController
  /movie:
    get:
      tags:
      - Movie
      summary: Retrieve a list of Movies
      operationId: retrieveMovies
      responses:
        "200":
          description: Array of movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movie'
                x-content-type: application/json
      x-swagger-router-controller: Movie
    post:
      tags:
      - Movie
      summary: Insert a new Movie
      operationId: insertMovie
      requestBody:
        description: Insert a new Movie
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/movie'
        required: true
      responses:
        "201":
          description: Movie inserted successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movie'
                x-content-type: application/json
        "405":
          description: Invalid input
      x-swagger-router-controller: Movie
  /movies/{id}:
    get:
      tags:
      - Movie
      summary: Retrieves a Movie by its ID
      description: Retrieve a movie by ID
      operationId: retrieveMovieById
      parameters:
      - name: id
        in: path
        description: ID of the movie to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: A movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'
        "404":
          description: Movie not found
      x-swagger-router-controller: Movie
    put:
      tags:
      - Movie
      summary: Update a Movie's information
      operationId: updateMovie
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: Successfull Update
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movie'
                x-content-type: application/json
        "400":
          description: Bad request
        "404":
          description: Movie not found
      x-swagger-router-controller: Movie
    delete:
      tags:
      - Movie
      summary: Deletes a Movie by its ID
      description: Deletes a movie by ID
      operationId: deleteMovieById
      parameters:
      - name: id
        in: path
        description: ID of the movie to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Movie Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'
        "404":
          description: Movie not found
      x-swagger-router-controller: Movie
  /director:
    get:
      tags:
      - Director
      summary: Retrieve a list of Directors
      operationId: retrieveDirectors
      responses:
        "200":
          description: Array of Directors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/director'
                x-content-type: application/json
      x-swagger-router-controller: Director
    post:
      tags:
      - Director
      summary: Add a new director
      operationId: addUser
      requestBody:
        description: Add a new director
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/director'
        required: true
      responses:
        "201":
          description: Director added successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
                x-content-type: application/json
        "405":
          description: Invalid input
      x-swagger-router-controller: Director
  /director/{id}:
    get:
      tags:
      - Director
      summary: Retrieves a Director by its ID
      description: Retrieve a Director by ID
      operationId: retrieveDirectorById
      parameters:
      - name: id
        in: path
        description: ID of the Director to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: A Director
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/director'
        "404":
          description: Director not found
      x-swagger-router-controller: Director
    put:
      tags:
      - Director
      summary: Update a Director's information
      operationId: updateDirector
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: Successfull Update
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/director'
                x-content-type: application/json
        "400":
          description: Bad request
        "404":
          description: Director not found
      x-swagger-router-controller: Director
    delete:
      tags:
      - Director
      summary: Deletes a Director by its ID
      description: Deletes a Director by ID
      operationId: deleteDirectorById
      parameters:
      - name: id
        in: path
        description: ID of the Director to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Director Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/director'
        "404":
          description: Director not found
      x-swagger-router-controller: Director
  /studio:
    get:
      tags:
      - Studio
      summary: Retrieve a list of Studio
      operationId: retrieveStudios
      responses:
        "200":
          description: Array of Studios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/studio'
                x-content-type: application/json
      x-swagger-router-controller: Studio
    post:
      tags:
      - Studio
      summary: Add a new Studio
      operationId: addStudio
      requestBody:
        description: Add a new studio
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/studio'
        required: true
      responses:
        "201":
          description: Studio added successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/studio'
                x-content-type: application/json
        "405":
          description: Invalid input
      x-swagger-router-controller: Studio
  /studio/{id}:
    get:
      tags:
      - Studio
      summary: Retrieves a Studio by its ID
      description: Retrieve a Studio by ID
      operationId: retrieveStudioById
      parameters:
      - name: id
        in: path
        description: ID of the Studio to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: A Studio
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studio'
        "404":
          description: Studio not found
      x-swagger-router-controller: Studio
    put:
      tags:
      - Studio
      summary: Update a Studio's information
      operationId: updateStudio
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: Successfull Update
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/studio'
                x-content-type: application/json
        "400":
          description: Bad request
        "404":
          description: Studio not found
      x-swagger-router-controller: Studio
    delete:
      tags:
      - Studio
      summary: Deletes a Studio by its ID
      description: Deletes a Studio by ID
      operationId: deleteStudioById
      parameters:
      - name: id
        in: path
        description: ID of the Studio to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Studio Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studio'
        "404":
          description: Studio not found
      x-swagger-router-controller: Studio
components:
  schemas:
    user:
      title: User
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          minLength: 5
          type: string
          example: a029185@umaia.pt
        password:
          type: string
          example: password
        name:
          type: string
          example: Francisco Dias
        birthdate:
          type: string
          format: date
          example: 1996-01-01
        nif:
          type: integer
          example: 123456789
      example:
        password: password
        birthdate: 1996-01-01T00:00:00.000+00:00
        name: Francisco Dias
        nif: 123456789
        id: 10
        email: a029185@umaia.pt
    watched:
      title: Watched
      type: object
      properties:
        user:
          $ref: '#/components/schemas/user'
        movie:
          $ref: '#/components/schemas/movie'
      example:
        movie:
          studio:
            name: Warner Bros
            id: 1
          country: USA
          releaseDate: "1999"
          director:
            name: David Fincher
            id: 6
          pgRate: 16
          length: 138
          rating: 5
          id: 0
          title: Fight Club
        user:
          password: password
          birthdate: 1996-01-01T00:00:00.000+00:00
          name: Francisco Dias
          nif: 123456789
          id: 10
          email: a029185@umaia.pt
    movie:
      title: Movie
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: Fight Club
        releaseDate:
          pattern: "^\\d{4}$"
          type: string
          example: "1999"
        pgRate:
          type: integer
          example: 16
        length:
          type: integer
          example: 138
        director:
          $ref: '#/components/schemas/director'
        studio:
          $ref: '#/components/schemas/studio'
        rating:
          pattern: "^[0-5]{1}$"
          type: integer
          example: 5
        country:
          pattern: "^[A-Z]{3}$"
          type: string
          example: USA
      example:
        studio:
          name: Warner Bros
          id: 1
        country: USA
        releaseDate: "1999"
        director:
          name: David Fincher
          id: 6
        pgRate: 16
        length: 138
        rating: 5
        id: 0
        title: Fight Club
    director:
      title: Director
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: David Fincher
      example:
        name: David Fincher
        id: 6
    studio:
      title: Studio
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Warner Bros
      example:
        name: Warner Bros
        id: 1
  requestBodies:
    User:
      description: User that needs to be added to the DB
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
